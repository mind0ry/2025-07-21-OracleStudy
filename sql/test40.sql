-- 요구사항 분석 ( 테이블 => 데이터 수집(jsoup , 공공데이터포털))
/*
	data.go.kr / data.seoul.go.kr
	1. 요구사항 분석
	   = 벤치마킹
	   = 페이지 분석 => 필요한 데이터 추출
	   -------------------------------------------
	   개념적 설계 = 논리적 설계 = 물리적 설계
							| 데이터 크기 설정 => 테이블
	   | 데이터 추출  | 데이터형 설정 , 키 종류 
	   -------------------------------------------------------------------
	   현재 이력서 통과율
		=> 자기 개발
			| 기록 => GIT => README
		=> 스타일 
	   기본 프로그래밍
		| 자바 / 오라클
		 데이터형 / 변수 / 제어문 / 메소드 / 연산자
		 객체지향 프로그램
		   => 자료구조 / 알고리즘 / 디자인 패턴
		   => String / IO / Collection
		   => DAO
		   => DML / DDL
 		   => GIT => 버전관리
		   
	   프론트 연동 : HTML / CSS / JavaScript
		=> 프레임워크 : Vue / React
		=> DOM , 이벤트 / RestFul
		     ------- Jquery
	   협업 / 배포 
		=> 프로젝트 / GIT , Docker / Docker-Hub / MiniKube / Jenkins
		=> 리눅스 명령어
	   => 테스트 (Junit) : 단위 테스트

	   => 과정 => 개인 프로젝트 (완성)
				따라하기 + 직접 구현
						----------- 문제 해결 능력
						| 어디까지 알고 있는지

	   => ER 모델 / 정규화 : 제약조건 , 키의 종류
		---------   ------- 1,2,3 => 한번에 완성 => ALTER
		ER - 모델
		----------- 엔티티 / 속성 / 관계도
							| 외래키
					     | 컬럼
				  | 테이블
		------------------------------------------------------------
		엔티티 (개체) : 사각형
		속성 : 타원형
		관계 : 마름모
			  | -----  |  1:1 1:N N:M
			맛집 --- 찜 --- 찜등록
						| 누가(ID) , 어떤 맛집(번호)
				   --- 관계
			  |
			번호 , 업체명..

		요구사항
			한 학교는 학생과 과목, 수강의 정보를 관리
			한 학생은 여러개의 과목을 수강 , 한 과목은 여러 학생이 수강
			학생 학번 / 이름 / 학년 / 전공
			과목 과목 코드 / 과목명 / 학점
			수강시에는 성적을 기록
	
		엔티티 
		   학생
		   과목
		관계
		   수강 : N:M
		속성 
		   1. 학생 : 학번,이름,학년,전공
		   2. 과목 : 과목 코드,과목명,학점

		=> ER
		   학생(학번(PK) , 이름 , 학년 , 전공)
			          |
				수강(학번(FK) , 과목코드(FK) , 성적) => 매핑 테이블
				  |
		   과목(과목 코드(PK) , 과목명 , 학점)
		   

		=> 맛집 (ID(PK),이름,주소,전화...)
			|
		       찜 => N:M (ID(FK) , 맛집번호(FK) , 찜번호(PK))
			|
		      맛집(맛집번호(PK),업체명 ...)
		-----------------------------------------------------------------------------
		정규화 => 반정규화
			목적 : 이상현상이 있는 테이블을 분해해서 이상현상을 방지하는 목적
				----------
				수정 이상 / 삭제 이상 
				=> 최대한 줄일 수 있는 방법 모색
			장점 
			   = 데이터베이스 변경시 이상현상을 제거 
			   = 새로운 데이터 추가할 경우에 => 일부만 변경이 가능
			   = 응용프로그램 변경시에 => 최소한의 영향
			단점
			   = 테이블이 분해 => JOIN
			   = 응답 속도가 늦다 => 반정규화를 사용하는 경우도 있다
			   
			-----------------------------------------
			 학번		이름 		과목
			-----------------------------------------
			1		홍길동	자바
			-----------------------------------------
			2		심청이	오라클,HTML
			-----------------------------------------
			3		박문수	CSS,JSP,Spring  취소시에 => 수정이 어렵다
			-----------------------------------------
				1) 모든 컬럼은 원자값을 가지고 있다
						     ------- 단일값
				2) 1정규화 : 원자값 저장 유도 

			------------------------------------------
			학번 		이름  	과목
			------------------------------------------
			1		홍길동	자바
			------------------------------------------
			2		심청이 	오라클
			------------------------------------------
			2		심청이	HTML
			------------------------------------------
			3		박문수	CSS
			------------------------------------------
			3		박문수	JSP
			------------------------------------------
			3		박문수	Spring
			------------------------------------------ => 이상현상

			=> 
			--------------	--------------------
			학번  이름		학번		과목
			--------------	--------------------
			1	홍길동	1		자바		
			--------------	--------------------
			2 	심청이	2		오라클
			--------------	--------------------
			3 	박문수	2		HTML  .....
			--------------	-------------------- => 컬럼의 원칙은 단일값
										------------------------ 원자성

						=> 무결성 원칙 => 2정규화 : 중복 제거 
			2정규화 : 1정규화가 만족 
					모든 컬럼은 부분적 종속을 제거
							 ------------- 완전 함수 종속
			  부분적 종속 : 기본키중에 특정 컬럼에만 종속
			  완전 함수 종속 : 기본키가 부분집합의 결정자가 되면 안된다
			-----------------------------
			학번	   과목   교수   성적
			-----------------------------
			1	   JSP	   홍길동 100
			-----------------------------
			2	  Spring 박문수  90
 			-----------------------------
			3	  CI/CD 이순신  80
			-----------------------------
			4         VueJS  홍길동 70
			-----------------------------	PRIMARY KEY(학번 , 과목)
								
								-------------
								학번		=> 성적
								과목		
								-------------
								    	|
								     교수
			------------------  -------------
			학번	과목  성적   과목  교수
			------------------  -------------
			 1    JSP	100
			------------------  -------------
			 2   Spring	90
			------------------  -------------
			 3  CI/CD	80
			------------------  -------------

			--------		---------
			학번 = 성적	과목 = 교수
			--------		---------

			----------------------------------------------------------
			3정규화 : 1정규화 , 2정규화 만족
			  		=> 학번 ======== 성적
					      강좌이름 ===== 강의실
			------------------------------------------------

			------------------------------
			학번   과목   강의실   성적
			------------------------------
			1	JSP	     A		3.5
			------------------------------
			2	JSP	     A		4.0
			------------------------------
			3	Spring	B	3.9
			------------------------------
			3	CI/CD	C	4.2
			------------------------------

			수강				강의실
			------------------		-------------------
			학번  과목  성적		과목	   강의실
			------------------		-------------------

			------------------		과목 => 강의실

			------------------		
			학번/과목 ==> 성적

	= 1정규화 : 각 컬럼은 한개의 데이터만 저장이 가능
			--------------------------- 여러개인 경우 (주정 , 삭제)
			 => 원자값
	= 2정규화 : 중복된 데이터 제거 = 테이블 분리
			기본키가 아닌 다른 키를 이용해서 제어  = 이행적 함수
				=> 부분적 함수 종속 (복합키)
	= 3정규화 : 한개의 기본키를 가지고 테이블을 제어
			=> 매핑 테이블
			=> JOIN이 많을 수 있다
	   정규화
		수강(학번 , 이름 , 학과 , 과목 코드 , 과목명 , 교수명 , 성적)
		1. 문제점
		   => 학번/과목이 중복될 수 있다
		2. 이상현상
		   = 추가이상(INSERT) : 수강이 안된 학생은 등록이 불가능
		   = 수정이상 : 학생의 이름변경(개명) => 학번을 찾아서 모든 이름 변경
		   = 삭제이상 : 수강 취소 => 모든 학번이 삭제
		-------------------------------------------------------------------------------------
		함수 종속성 : 컬럼으로 제어 => 어디까지 제어
			학번 => 이름 / 학과
			과목 코드 => 과목명 / 교수명
			(학번,과목코드) => 성적
		3. 정규화
			=> 단일값 설정 (원자값) => 이미 완료
				------------------------------------- 1 정규화
			=> 종속 
				기본키 (복합키) => 제거
				학번 / 과목코드 => PK  => PRIMARY KEY(학번,과목코드)
				1 100
				2 200
				3 100
				1 200
			=> 이름 / 학과 => 학번으로 제어가 가능하게 -> 테이블 분리

			학생(학번(PK) , 이름 , 학과) => 사각형
					| 학번 : 1:N
			수강(학번(FK),과목코드(FK),성적) => 마름모
					| 과목 코드 : 1:N
			과목(과목코드(PK),과목명,교수명) => 사각형

			=> 중복제거 / PK/FK => 각 테이블간의 연결
					
		---------------------------------------------------------------------------
		요구사항(도서관 시스템)
		  1. 도서관에는 회원들이 책을 빌려간다
		  2. 회원은 회원번호 / 이름 / 전화번호 / 주소
		  3. 책은 책ID / 제목 / 저장 / 출판사
		  4. 한 회원은 여러 권의 책을 빌릴 수 있다
			한 책은 여러 회원이 빌릴 수 있다 (다른 시간)
		  5. 대출시 일자 / 반납예정일 / 반납일
		------------------------------------------------------------
		  회원 (회원번호 PK , 이름 , 전화번호 , 주소)
		  도서 (책ID PK, 제목 , 저장 , 출판사)
		  대출 (회원번호 FK, 책ID FK , 대출시 일자 , 반납예정일 , 반납일)

		  회원 --- 대출 --- 도서
		    |
		---------
		|	  |

		회원 <--> 도서 : N:M => 대출을 통해 연결
	 	=> 복합키 (회원번호 FK, 책ID FK)
	
		
		
		환자 (환자ID PK , 이름 , 생년월일 , 전화번호)
					| 1:N
		진료기록 (환자ID FK, 의사ID FK, 진료일자 , 진료내용 , 진단명)
					| 1:N
		의사 (의사ID PK, 이름 , 전문 과목)




		고객 (고객ID PK, 이름 , 전화번호 , 주소)
					| 1:N
		주문 (고객ID FK, 상품ID FK, 주문일자  , 수량)
					| 1:N
		상품 (상품ID PK, 상품명 , 가격 , 재고수령)


		
*/